import cdflib
import numpy as np
import matplotlib.pyplot as plt
import os
import astropy.constants as constant
from scipy.interpolate import griddata
from matplotlib.colors import LogNorm
import sys
import pandas as pd

plot_mag = False
# a = sys.argv

# load vdf data
pas_l2_dir = r'data\solar_orbiter_data\swa\science\l2\pas-vdf'
pas_name = 'solo_l2_swa-pas-vdf_20230331_v02.cdf'
pas_file = os.path.join(pas_l2_dir, pas_name)

data = cdflib.CDF(pas_file)
#%%
thetabin = data.varget('nb_Energy')
#%%
epoch = data.varget('Epoch')
vdf_time = cdflib.cdfepoch.to_datetime(epoch)
energybin = data.varget('Energy')  #'UNITS': 'eV'
thetabin = data.varget('Elevation')
phibin = data.varget('Azimuth')
rotmat_rtn_inst = data.varget('PAS_to_RTN')
vdf = data.varget('vdf')  #Units: 'eV/cm2-s-ster-eV'
speedbin = np.sqrt(2 * energybin * constant.e.value / constant.m_p.value) / 1000  # km/s
#%%
ele_arr = np.tile(thetabin[None, :, None], (11, 1, 96))
azi_arr = np.tile(phibin[:, None, None], (1, 9, 96))
vel_arr = np.tile(speedbin[None, None, :], (11, 9, 1))
vx = -np.cos(np.deg2rad(ele_arr)) * np.cos(np.deg2rad(azi_arr)) * vel_arr
vy = -np.cos(np.deg2rad(ele_arr)) * np.sin(np.deg2rad(azi_arr)) * vel_arr
vz = np.sin(np.deg2rad(ele_arr)) * vel_arr
#%%
vx_lst,vy_lst,vz_lst = np.linspace(-200,-900,71),np.linspace(-450,150,51),np.linspace(-200,300,51)
vx_arr,vy_arr,vz_arr = np.meshgrid(vx_lst,vy_lst,vz_lst,indexing='ij')
xi = np.array([vx_arr.ravel(),vy_arr.ravel(),vz_arr.ravel()]).T
x_test = np.array([vx.ravel(),vy.ravel(),vz.ravel()]).T

# load mag data
if plot_mag:
    mag_l2_dir = r'data\solar_orbiter_data\mag\science\l2\rtn-normal'
    mag_name = 'solo_l2_mag-rtn-normal_20230401_v01.cdf'
    mag_file = os.path.join(mag_l2_dir, mag_name)

    mag_data = cdflib.CDF(mag_file)
    # %%
    mag_epoch = mag_data.varget('Epoch')
    mag_time = cdflib.cdfepoch.to_datetime(mag_epoch)
    mag_rtn = mag_data.varget('B_RTN')
    br_lst = mag_rtn[:, 0]
    bt_lst = mag_rtn[:, 1]
    bn_lst = mag_rtn[:, 2]


for itime in range(0,epoch.size,500):
    vdf_temp = vdf[itime, :, :, :]
    grid_vdf = (griddata(x_test, vdf_temp.ravel(), xi, method='linear', fill_value=0.0)).reshape([71, 51, 51])


    # %%
    fig = plt.figure(figsize=(4, 4))
    fig, axs = plt.subplots(1, 1, sharex=True, sharey=True)
    # cax=axs.pcolor(-vx_lst,vy_lst,np.sum(grid_vdf[:,:,:],axis=1).T,cmap='jet', norm=LogNorm(vmin=1e-12,vmax=1e-8))
    thegrid_vdf = grid_vdf[:, 25, :].T
    vdf_max_idx = thegrid_vdf.argmax()
    cax = axs.pcolor(-vx_lst, -vz_lst, thegrid_vdf, cmap='jet', norm=LogNorm(vmin=1e-12, vmax=5e-9))

    if plot_mag:
        br = np.interp(epoch[itime], mag_epoch, br_lst)
        bt = np.interp(epoch[itime], mag_epoch, bt_lst)
        bn = np.interp(epoch[itime], mag_epoch, bn_lst)
        epara = [br, bt, bn]
        epara = epara / np.linalg.norm(epara)
        axs.quiver(-vx_lst[vdf_max_idx % 71], -vz_lst[vdf_max_idx // 71], epara[0], epara[2],
                   color='white', pivot='mid',
                   scale=13)

    #
    datetime_str = str(vdf_time[itime])
    figtitle = 'VDF  ' + datetime_str
    axs.set_title(figtitle)
    axs.set_ylabel('$V_N$ (km/s)')
    axs.set_xlabel('$V_R$ (km/s)')

    cbLabel = 'VDF $(cm^{-3}\cdot s^6)$'
    fig.colorbar(cax, ax=axs, orientation='horizontal', fraction=.1, label=cbLabel)
    plt.suptitle('Generated by plot_vdf_from_SolO_PAS.py', x=0.965, y=0.03, fontsize=8, color='gray', ha='right',
                 va='bottom')

    pdts = pd.to_datetime(datetime_str)
    datestr = pdts.strftime('%Y%m%d')
    figDir = 'figure/' + datestr + '/'
    if not os.path.exists(figDir):
        os.mkdir(figDir)

    plt.savefig('figure/' + datestr + '/' + datestr + '_{}.png'.format(itime), dpi=300)

# itime = 1000
# vdf_temp = vdf[itime, :, :, :]
# grid_vdf = (griddata(x_test, vdf_temp.ravel(), xi, method='linear', fill_value=0.0)).reshape([71, 51, 51])
#
# br = np.interp(epoch[itime], mag_epoch, br_lst)
# bt = np.interp(epoch[itime], mag_epoch, bt_lst)
# bn = np.interp(epoch[itime], mag_epoch, bn_lst)
# epara = [br, bt, bn]
# epara = epara / np.linalg.norm(epara)
# # %%
# fig = plt.figure(figsize=(4, 4))
# fig, axs = plt.subplots(1, 1, sharex=True, sharey=True)
# # cax=axs.pcolor(-vx_lst,vy_lst,np.sum(grid_vdf[:,:,:],axis=1).T,cmap='jet', norm=LogNorm(vmin=1e-12,vmax=1e-8))
# thegrid_vdf = grid_vdf[:, 25, :].T
# vdf_max_idx = thegrid_vdf.argmax()
# cax = axs.pcolor(-vx_lst, vy_lst, thegrid_vdf, cmap='jet', norm=LogNorm(vmin=1e-12, vmax=5e-9))
# axs.quiver(-vx_lst[vdf_max_idx % 71], vy_lst[vdf_max_idx // 71], 3*epara[0], 3*epara[2])
# datetime_str = str(vdf_time[itime])
# figtitle = 'VDF  ' + datetime_str
# axs.set_title(figtitle)
# axs.set_ylabel('$V_N$ (km/s)')
# axs.set_xlabel('$V_R$ (km/s)')
#
# cbLabel = 'VDF $(cm^{-3}\cdot s^6)$'
# fig.colorbar(cax, ax=axs, orientation='horizontal', fraction=.1, label=cbLabel)
# plt.suptitle('Generated by plot_vdf_from_SolO_PAS.py', x=0.965, y=0.03, fontsize=8, color='gray', ha='right',
#              va='bottom')
# plt.show()

# pdts = pd.to_datetime(datetime_str)
# datestr = pdts.strftime('%Y%m%d')
# figDir = 'figure/' + datestr + '/'
# if not os.path.exists(figDir):
#     os.mkdir(figDir)
# # plt.savefig('figure/' + datestr + '/' + datestr + '_{}.png'.format(itime), dpi=300)

